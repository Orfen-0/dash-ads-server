version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGOSH_DISABLE_HISTORY: "true"
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker_conf/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DEFAULT_BUCKETS: streams
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - app_network
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    volumes:
      - ./docker_conf/mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - "1883:1883"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "mosquitto_sub -h localhost -t healthcheck -C 1 -W 2 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3

  server:
    build: ../
    container_name: go_server
    environment:
      RTMP_PORT: "1935"
      HTTP_PORT: "8080"
      MONGODB_URI: mongodb://root:example@mongodb:27017
      MONGODB_DATABASE: dash_ads_server
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: "false"
      MINIO_BUCKET: streams
      RTMP_DOMAIN: "localhost"
      MQTT_URI: mqtt://mosquitto:1883
      MQTT_USERNAME:
      MQTT_PASSWORD:
    ports:
      - "8080:8080"
      - "1935:1935"
    depends_on:
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app_network

  frontend:
    build: ./frontend
    container_name: react_frontend
    environment:
      REACT_APP_API_URL: "http://server:8080"
    ports:
      - "3000:3000"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  mongodb_data:
  minio_data:
