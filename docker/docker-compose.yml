version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BUCKETS: streams
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - app_network
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    # Expose the standard MQTT port (1883) and an optional WebSocket port (9001).
    ports:
      - "1883:1883"
      # Uncomment if you want a websocket listener for MQTT:
      # - "9001:9001"
    networks:
      - app_network
    # You can mount a custom configuration or persist data if needed:
    # volumes:
    #   - mosquitto_conf:/mosquitto/config
    #   - mosquitto_data:/mosquitto/data

    healthcheck:
      test: [ "CMD-SHELL", "mosquitto_sub -h localhost -t healthcheck -C 1 -W 2 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
networks:
  app_network:
    driver: bridge

volumes:
  mongodb_data:
  minio_data:
